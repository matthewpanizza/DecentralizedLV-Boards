/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.1 Mon Dec 27 21:14:20 2021.
 */

#include <string.h>

#include "DecentralizedLV-Boards/HVBoards/dbc_bms.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

int dbc_bms_msgid_0_x6_b0_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_right_shift_u16(pack_current, 8u, 0xffu);
    dst_p[1] |= pack_left_shift_u16(pack_current, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(pack_inst_voltage, 8u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(pack_inst_voltage, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(pack_soc, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(relay_state, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(relay_state, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(crc_checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x6_b0_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    pack_current = unpack_left_shift_u16(src_p[0], 8u, 0xffu);
    pack_current |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    pack_inst_voltage = unpack_left_shift_u16(src_p[2], 8u, 0xffu);
    pack_inst_voltage |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    pack_soc = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    relay_state = unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    relay_state |= unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    crc_checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint16_t dbc_bms_msgid_0_x6_b0_t::pack_current_encode()
{
    return (uint16_t)(pack_current / 0.1);
}

double dbc_bms_msgid_0_x6_b0_t::pack_current_decode()
{
    return ((double)pack_current * 0.1);
}

bool dbc_bms_msgid_0_x6_b0_t::pack_current_is_in_range()
{
    (void)pack_current;

    return (true);
}

uint16_t dbc_bms_msgid_0_x6_b0_t::pack_inst_voltage_encode()
{
    return (uint16_t)(pack_inst_voltage / 0.1);
}

double dbc_bms_msgid_0_x6_b0_t::pack_inst_voltage_decode()
{
    return ((double)pack_inst_voltage * 0.1);
}

bool dbc_bms_msgid_0_x6_b0_t::pack_inst_voltage_is_in_range()
{
    (void)pack_inst_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b0_t::pack_soc_encode()
{
    return (uint8_t)(pack_soc / 0.5);
}

double dbc_bms_msgid_0_x6_b0_t::pack_soc_decode()
{
    return ((double)pack_soc * 0.5);
}

bool dbc_bms_msgid_0_x6_b0_t::pack_soc_is_in_range()
{
    (void)pack_soc;

    return (true);
}

uint16_t dbc_bms_msgid_0_x6_b0_t::relay_state_encode()
{
    return (uint16_t)(relay_state);
}

double dbc_bms_msgid_0_x6_b0_t::relay_state_decode()
{
    return ((double)relay_state);
}

bool dbc_bms_msgid_0_x6_b0_t::relay_state_is_in_range()
{
    (void)relay_state;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b0_t::crc_checksum_encode()
{
    return (uint8_t)(crc_checksum - 1720.0);
}

double dbc_bms_msgid_0_x6_b0_t::crc_checksum_decode()
{
    return ((double)crc_checksum + 1720.0);
}

bool dbc_bms_msgid_0_x6_b0_t::crc_checksum_is_in_range()
{
    (void)crc_checksum;

    return (true);
}

int dbc_bms_msgid_0_x6_b1_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_right_shift_u16(pack_dcl, 8u, 0xffu);
    dst_p[1] |= pack_left_shift_u16(pack_dcl, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(pack_ccl, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(blank, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(high_temperature, 0u, 0xffu);
    dst_p[5] |= pack_left_shift_u8(low_temperature, 0u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(failsafe_statuses, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(crc_checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x6_b1_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    pack_dcl = unpack_left_shift_u16(src_p[0], 8u, 0xffu);
    pack_dcl |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    pack_ccl = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    blank = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    high_temperature = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    low_temperature = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
    failsafe_statuses = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    crc_checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint16_t dbc_bms_msgid_0_x6_b1_t::pack_dcl_encode()
{
    return (uint16_t)(pack_dcl);
}

double dbc_bms_msgid_0_x6_b1_t::pack_dcl_decode()
{
    return ((double)pack_dcl);
}

bool dbc_bms_msgid_0_x6_b1_t::pack_dcl_is_in_range()
{
    (void)pack_dcl;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b1_t::pack_ccl_encode()
{
    return (uint8_t)(pack_ccl);
}

double dbc_bms_msgid_0_x6_b1_t::pack_ccl_decode()
{
    return ((double)pack_ccl);
}

bool dbc_bms_msgid_0_x6_b1_t::pack_ccl_is_in_range()
{
    (void)pack_ccl;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b1_t::blank_encode()
{
    return (uint8_t)(blank);
}

double dbc_bms_msgid_0_x6_b1_t::blank_decode()
{
    return ((double)blank);
}

bool dbc_bms_msgid_0_x6_b1_t::blank_is_in_range()
{
    (void)blank;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b1_t::high_temperature_encode()
{
    return (uint8_t)(high_temperature);
}

double dbc_bms_msgid_0_x6_b1_t::high_temperature_decode()
{
    return ((double)high_temperature);
}

bool dbc_bms_msgid_0_x6_b1_t::high_temperature_is_in_range()
{
    (void)high_temperature;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b1_t::low_temperature_encode()
{
    return (uint8_t)(low_temperature);
}

double dbc_bms_msgid_0_x6_b1_t::low_temperature_decode()
{
    return ((double)low_temperature);
}

bool dbc_bms_msgid_0_x6_b1_t::low_temperature_is_in_range()
{
    (void)low_temperature;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b1_t::failsafe_statuses_encode()
{
    return (uint8_t)(failsafe_statuses);
}

double dbc_bms_msgid_0_x6_b1_t::failsafe_statuses_decode()
{
    return ((double)failsafe_statuses);
}

bool dbc_bms_msgid_0_x6_b1_t::failsafe_statuses_is_in_range()
{
    (void)failsafe_statuses;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b1_t::crc_checksum_encode()
{
    return (uint8_t)(crc_checksum - 1721.0);
}

double dbc_bms_msgid_0_x6_b1_t::crc_checksum_decode()
{
    return ((double)crc_checksum + 1721.0);
}

bool dbc_bms_msgid_0_x6_b1_t::crc_checksum_is_in_range()
{
    (void)crc_checksum;

    return (true);
}

int dbc_bms_msgid_0_x6_b2_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(pack_ccl, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(pack_open_voltage, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(pack_amphours, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(pack_resistance, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(pack_dod, 0u, 0xffu);
    dst_p[5] |= pack_left_shift_u8(pack_summed_voltage, 0u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(pack_abs_current_unsigned, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(crc_checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x6_b2_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    pack_ccl = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    pack_open_voltage = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    pack_amphours = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    pack_resistance = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    pack_dod = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    pack_summed_voltage = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
    pack_abs_current_unsigned = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    crc_checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::pack_ccl_encode()
{
    return (uint8_t)(pack_ccl);
}

double dbc_bms_msgid_0_x6_b2_t::pack_ccl_decode()
{
    return ((double)pack_ccl);
}

bool dbc_bms_msgid_0_x6_b2_t::pack_ccl_is_in_range()
{
    (void)pack_ccl;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::pack_open_voltage_encode()
{
    return (uint8_t)(pack_open_voltage / 0.1);
}

double dbc_bms_msgid_0_x6_b2_t::pack_open_voltage_decode()
{
    return ((double)pack_open_voltage * 0.1);
}

bool dbc_bms_msgid_0_x6_b2_t::pack_open_voltage_is_in_range()
{
    (void)pack_open_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::pack_amphours_encode()
{
    return (uint8_t)(pack_amphours / 0.1);
}

double dbc_bms_msgid_0_x6_b2_t::pack_amphours_decode()
{
    return ((double)pack_amphours * 0.1);
}

bool dbc_bms_msgid_0_x6_b2_t::pack_amphours_is_in_range()
{
    (void)pack_amphours;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::pack_resistance_encode()
{
    return (uint8_t)(pack_resistance / 0.001);
}

double dbc_bms_msgid_0_x6_b2_t::pack_resistance_decode()
{
    return ((double)pack_resistance * 0.001);
}

bool dbc_bms_msgid_0_x6_b2_t::pack_resistance_is_in_range()
{
    (void)pack_resistance;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::pack_dod_encode()
{
    return (uint8_t)(pack_dod / 0.5);
}

double dbc_bms_msgid_0_x6_b2_t::pack_dod_decode()
{
    return ((double)pack_dod * 0.5);
}

bool dbc_bms_msgid_0_x6_b2_t::pack_dod_is_in_range()
{
    (void)pack_dod;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::pack_summed_voltage_encode()
{
    return (uint8_t)(pack_summed_voltage / 0.01);
}

double dbc_bms_msgid_0_x6_b2_t::pack_summed_voltage_decode()
{
    return ((double)pack_summed_voltage * 0.01);
}

bool dbc_bms_msgid_0_x6_b2_t::pack_summed_voltage_is_in_range()
{
    (void)pack_summed_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::pack_abs_current_unsigned_encode()
{
    return (uint8_t)(pack_abs_current_unsigned / 0.1);
}

double dbc_bms_msgid_0_x6_b2_t::pack_abs_current_unsigned_decode()
{
    return ((double)pack_abs_current_unsigned * 0.1);
}

bool dbc_bms_msgid_0_x6_b2_t::pack_abs_current_unsigned_is_in_range()
{
    (void)pack_abs_current_unsigned;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b2_t::crc_checksum_encode()
{
    return (uint8_t)(crc_checksum);
}

double dbc_bms_msgid_0_x6_b2_t::crc_checksum_decode()
{
    return ((double)crc_checksum);
}

bool dbc_bms_msgid_0_x6_b2_t::crc_checksum_is_in_range()
{
    (void)crc_checksum;

    return (true);
}

int dbc_bms_msgid_0_x6_b3_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(total_pack_cycles, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(average_temperature, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(internal_temperature, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(j1772_plug_state, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(j1772_ac_current_limit, 0u, 0xffu);
    dst_p[5] |= pack_left_shift_u8(high_cell_voltage, 0u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(low_cell_voltage, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(crc_checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x6_b3_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    total_pack_cycles = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    average_temperature = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    internal_temperature = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    j1772_plug_state = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    j1772_ac_current_limit = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    high_cell_voltage = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
    low_cell_voltage = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    crc_checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::total_pack_cycles_encode()
{
    return (uint8_t)(total_pack_cycles);
}

double dbc_bms_msgid_0_x6_b3_t::total_pack_cycles_decode()
{
    return ((double)total_pack_cycles);
}

bool dbc_bms_msgid_0_x6_b3_t::total_pack_cycles_is_in_range()
{
    (void)total_pack_cycles;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::average_temperature_encode()
{
    return (uint8_t)(average_temperature);
}

double dbc_bms_msgid_0_x6_b3_t::average_temperature_decode()
{
    return ((double)average_temperature);
}

bool dbc_bms_msgid_0_x6_b3_t::average_temperature_is_in_range()
{
    (void)average_temperature;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::internal_temperature_encode()
{
    return (uint8_t)(internal_temperature);
}

double dbc_bms_msgid_0_x6_b3_t::internal_temperature_decode()
{
    return ((double)internal_temperature);
}

bool dbc_bms_msgid_0_x6_b3_t::internal_temperature_is_in_range()
{
    (void)internal_temperature;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::j1772_plug_state_encode()
{
    return (uint8_t)(j1772_plug_state);
}

double dbc_bms_msgid_0_x6_b3_t::j1772_plug_state_decode()
{
    return ((double)j1772_plug_state);
}

bool dbc_bms_msgid_0_x6_b3_t::j1772_plug_state_is_in_range()
{
    (void)j1772_plug_state;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::j1772_ac_current_limit_encode()
{
    return (uint8_t)(j1772_ac_current_limit);
}

double dbc_bms_msgid_0_x6_b3_t::j1772_ac_current_limit_decode()
{
    return ((double)j1772_ac_current_limit);
}

bool dbc_bms_msgid_0_x6_b3_t::j1772_ac_current_limit_is_in_range()
{
    (void)j1772_ac_current_limit;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::high_cell_voltage_encode()
{
    return (uint8_t)(high_cell_voltage / 0.00010);
}

double dbc_bms_msgid_0_x6_b3_t::high_cell_voltage_decode()
{
    return ((double)high_cell_voltage * 0.00010);
}

bool dbc_bms_msgid_0_x6_b3_t::high_cell_voltage_is_in_range()
{
    (void)high_cell_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::low_cell_voltage_encode()
{
    return (uint8_t)(low_cell_voltage / 0.00010);
}

double dbc_bms_msgid_0_x6_b3_t::low_cell_voltage_decode()
{
    return ((double)low_cell_voltage * 0.00010);
}

bool dbc_bms_msgid_0_x6_b3_t::low_cell_voltage_is_in_range()
{
    (void)low_cell_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b3_t::crc_checksum_encode()
{
    return (uint8_t)(crc_checksum);
}

double dbc_bms_msgid_0_x6_b3_t::crc_checksum_decode()
{
    return ((double)crc_checksum);
}

bool dbc_bms_msgid_0_x6_b3_t::crc_checksum_is_in_range()
{
    (void)crc_checksum;

    return (true);
}

int dbc_bms_msgid_0_x6_b4_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(low_opencell_voltage, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(high_opencell_voltage, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(avg_opencell_voltage, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(low_cell_resistance, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(high_cell_resistance, 0u, 0xffu);
    dst_p[5] |= pack_left_shift_u8(avg_cell_resistance, 0u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(low_cell_voltage_id, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(crc_checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x6_b4_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    low_opencell_voltage = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    high_opencell_voltage = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    avg_opencell_voltage = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    low_cell_resistance = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    high_cell_resistance = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    avg_cell_resistance = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
    low_cell_voltage_id = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    crc_checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::low_opencell_voltage_encode()
{
    return (uint8_t)(low_opencell_voltage / 0.00010);
}

double dbc_bms_msgid_0_x6_b4_t::low_opencell_voltage_decode()
{
    return ((double)low_opencell_voltage * 0.00010);
}

bool dbc_bms_msgid_0_x6_b4_t::low_opencell_voltage_is_in_range()
{
    (void)low_opencell_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::high_opencell_voltage_encode()
{
    return (uint8_t)(high_opencell_voltage / 0.00010);
}

double dbc_bms_msgid_0_x6_b4_t::high_opencell_voltage_decode()
{
    return ((double)high_opencell_voltage * 0.00010);
}

bool dbc_bms_msgid_0_x6_b4_t::high_opencell_voltage_is_in_range()
{
    (void)high_opencell_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::avg_opencell_voltage_encode()
{
    return (uint8_t)(avg_opencell_voltage / 0.00010);
}

double dbc_bms_msgid_0_x6_b4_t::avg_opencell_voltage_decode()
{
    return ((double)avg_opencell_voltage * 0.00010);
}

bool dbc_bms_msgid_0_x6_b4_t::avg_opencell_voltage_is_in_range()
{
    (void)avg_opencell_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::low_cell_resistance_encode()
{
    return (uint8_t)(low_cell_resistance / 0.01);
}

double dbc_bms_msgid_0_x6_b4_t::low_cell_resistance_decode()
{
    return ((double)low_cell_resistance * 0.01);
}

bool dbc_bms_msgid_0_x6_b4_t::low_cell_resistance_is_in_range()
{
    (void)low_cell_resistance;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::high_cell_resistance_encode()
{
    return (uint8_t)(high_cell_resistance / 0.01);
}

double dbc_bms_msgid_0_x6_b4_t::high_cell_resistance_decode()
{
    return ((double)high_cell_resistance * 0.01);
}

bool dbc_bms_msgid_0_x6_b4_t::high_cell_resistance_is_in_range()
{
    (void)high_cell_resistance;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::avg_cell_resistance_encode()
{
    return (uint8_t)(avg_cell_resistance / 0.01);
}

double dbc_bms_msgid_0_x6_b4_t::avg_cell_resistance_decode()
{
    return ((double)avg_cell_resistance * 0.01);
}

bool dbc_bms_msgid_0_x6_b4_t::avg_cell_resistance_is_in_range()
{
    (void)avg_cell_resistance;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::low_cell_voltage_id_encode()
{
    return (uint8_t)(low_cell_voltage_id);
}

double dbc_bms_msgid_0_x6_b4_t::low_cell_voltage_id_decode()
{
    return ((double)low_cell_voltage_id);
}

bool dbc_bms_msgid_0_x6_b4_t::low_cell_voltage_id_is_in_range()
{
    (void)low_cell_voltage_id;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b4_t::crc_checksum_encode()
{
    return (uint8_t)(crc_checksum);
}

double dbc_bms_msgid_0_x6_b4_t::crc_checksum_decode()
{
    return ((double)crc_checksum);
}

bool dbc_bms_msgid_0_x6_b4_t::crc_checksum_is_in_range()
{
    (void)crc_checksum;

    return (true);
}

int dbc_bms_msgid_0_x6_b5_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(low_opencell_id, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(high_opencell_id, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(high_intres_id, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(low_intres_id, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(input_supply_voltage, 0u, 0xffu);
    dst_p[5] |= pack_left_shift_u8(j1772_ac_power_limit, 0u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(j1772_ac_voltage, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(crc_checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x6_b5_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    low_opencell_id = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    high_opencell_id = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    high_intres_id = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    low_intres_id = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    input_supply_voltage = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    j1772_ac_power_limit = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
    j1772_ac_voltage = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    crc_checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::low_opencell_id_encode()
{
    return (uint8_t)(low_opencell_id);
}

double dbc_bms_msgid_0_x6_b5_t::low_opencell_id_decode()
{
    return ((double)low_opencell_id);
}

bool dbc_bms_msgid_0_x6_b5_t::low_opencell_id_is_in_range()
{
    (void)low_opencell_id;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::high_opencell_id_encode()
{
    return (uint8_t)(high_opencell_id);
}

double dbc_bms_msgid_0_x6_b5_t::high_opencell_id_decode()
{
    return ((double)high_opencell_id);
}

bool dbc_bms_msgid_0_x6_b5_t::high_opencell_id_is_in_range()
{
    (void)high_opencell_id;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::high_intres_id_encode()
{
    return (uint8_t)(high_intres_id);
}

double dbc_bms_msgid_0_x6_b5_t::high_intres_id_decode()
{
    return ((double)high_intres_id);
}

bool dbc_bms_msgid_0_x6_b5_t::high_intres_id_is_in_range()
{
    (void)high_intres_id;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::low_intres_id_encode()
{
    return (uint8_t)(low_intres_id);
}

double dbc_bms_msgid_0_x6_b5_t::low_intres_id_decode()
{
    return ((double)low_intres_id);
}

bool dbc_bms_msgid_0_x6_b5_t::low_intres_id_is_in_range()
{
    (void)low_intres_id;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::input_supply_voltage_encode()
{
    return (uint8_t)(input_supply_voltage / 0.1);
}

double dbc_bms_msgid_0_x6_b5_t::input_supply_voltage_decode()
{
    return ((double)input_supply_voltage * 0.1);
}

bool dbc_bms_msgid_0_x6_b5_t::input_supply_voltage_is_in_range()
{
    (void)input_supply_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::j1772_ac_power_limit_encode()
{
    return (uint8_t)(j1772_ac_power_limit);
}

double dbc_bms_msgid_0_x6_b5_t::j1772_ac_power_limit_decode()
{
    return ((double)j1772_ac_power_limit);
}

bool dbc_bms_msgid_0_x6_b5_t::j1772_ac_power_limit_is_in_range()
{
    (void)j1772_ac_power_limit;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::j1772_ac_voltage_encode()
{
    return (uint8_t)(j1772_ac_voltage / 0.1);
}

double dbc_bms_msgid_0_x6_b5_t::j1772_ac_voltage_decode()
{
    return ((double)j1772_ac_voltage * 0.1);
}

bool dbc_bms_msgid_0_x6_b5_t::j1772_ac_voltage_is_in_range()
{
    (void)j1772_ac_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b5_t::crc_checksum_encode()
{
    return (uint8_t)(crc_checksum);
}

double dbc_bms_msgid_0_x6_b5_t::crc_checksum_decode()
{
    return ((double)crc_checksum);
}

bool dbc_bms_msgid_0_x6_b5_t::crc_checksum_is_in_range()
{
    (void)crc_checksum;

    return (true);
}

int dbc_bms_msgid_0_x6_b6_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(avg_cell_voltage, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(high_cell_voltage, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(dtc_flags_1, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(dtc_flags_2, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(populated_cells, 0u, 0xffu);
    dst_p[5] |= pack_left_shift_u8(max_cell_number, 0u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(hem_mode, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(crc_checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x6_b6_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    avg_cell_voltage = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    high_cell_voltage = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dtc_flags_1 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dtc_flags_2 = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    populated_cells = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
    max_cell_number = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
    hem_mode = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    crc_checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::avg_cell_voltage_encode()
{
    return (uint8_t)(avg_cell_voltage / 0.00010);
}

double dbc_bms_msgid_0_x6_b6_t::avg_cell_voltage_decode()
{
    return ((double)avg_cell_voltage * 0.00010);
}

bool dbc_bms_msgid_0_x6_b6_t::avg_cell_voltage_is_in_range()
{
    (void)avg_cell_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::high_cell_voltage_encode()
{
    return (uint8_t)(high_cell_voltage / 0.00010);
}

double dbc_bms_msgid_0_x6_b6_t::high_cell_voltage_decode()
{
    return ((double)high_cell_voltage * 0.00010);
}

bool dbc_bms_msgid_0_x6_b6_t::high_cell_voltage_is_in_range()
{
    (void)high_cell_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::dtc_flags_1_encode()
{
    return (uint8_t)(dtc_flags_1);
}

double dbc_bms_msgid_0_x6_b6_t::dtc_flags_1_decode()
{
    return ((double)dtc_flags_1);
}

bool dbc_bms_msgid_0_x6_b6_t::dtc_flags_1_is_in_range()
{
    (void)dtc_flags_1;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::dtc_flags_2_encode()
{
    return (uint8_t)(dtc_flags_2);
}

double dbc_bms_msgid_0_x6_b6_t::dtc_flags_2_decode()
{
    return ((double)dtc_flags_2);
}

bool dbc_bms_msgid_0_x6_b6_t::dtc_flags_2_is_in_range()
{
    (void)dtc_flags_2;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::populated_cells_encode()
{
    return (uint8_t)(populated_cells);
}

double dbc_bms_msgid_0_x6_b6_t::populated_cells_decode()
{
    return ((double)populated_cells);
}

bool dbc_bms_msgid_0_x6_b6_t::populated_cells_is_in_range()
{
    (void)populated_cells;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::max_cell_number_encode()
{
    return (uint8_t)(max_cell_number);
}

double dbc_bms_msgid_0_x6_b6_t::max_cell_number_decode()
{
    return ((double)max_cell_number);
}

bool dbc_bms_msgid_0_x6_b6_t::max_cell_number_is_in_range()
{
    (void)max_cell_number;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::hem_mode_encode()
{
    return (uint8_t)(hem_mode);
}

double dbc_bms_msgid_0_x6_b6_t::hem_mode_decode()
{
    return ((double)hem_mode);
}

bool dbc_bms_msgid_0_x6_b6_t::hem_mode_is_in_range()
{
    (void)hem_mode;

    return (true);
}

uint8_t dbc_bms_msgid_0_x6_b6_t::crc_checksum_encode()
{
    return (uint8_t)(crc_checksum);
}

double dbc_bms_msgid_0_x6_b6_t::crc_checksum_decode()
{
    return ((double)crc_checksum);
}

bool dbc_bms_msgid_0_x6_b6_t::crc_checksum_is_in_range()
{
    (void)crc_checksum;

    return (true);
}

int dbc_bms_msgid_0_x36_cellbcast_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(cell_id, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(cell_voltage, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(cell_voltage, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(cell_resistance, 8u, 0x7fu);
    dst_p[4] |= pack_left_shift_u16(cell_resistance, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(cell_balancing, 7u, 0x80u);
    dst_p[5] |= pack_right_shift_u16(cell_open_voltage, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(cell_open_voltage, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(checksum, 0u, 0xffu);

    return (8);
}

int dbc_bms_msgid_0_x36_cellbcast_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    cell_id = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    cell_voltage = unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    cell_voltage |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    cell_resistance = unpack_left_shift_u16(src_p[3], 8u, 0x7fu);
    cell_resistance |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    cell_balancing = unpack_right_shift_u8(src_p[3], 7u, 0x80u);
    cell_open_voltage = unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    cell_open_voltage |= unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    checksum = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t dbc_bms_msgid_0_x36_cellbcast_t::cell_id_encode()
{
    return (uint8_t)(cell_id);
}

double dbc_bms_msgid_0_x36_cellbcast_t::cell_id_decode()
{
    return ((double)cell_id);
}

bool dbc_bms_msgid_0_x36_cellbcast_t::cell_id_is_in_range()
{
    (void)cell_id;

    return (true);
}

uint16_t dbc_bms_msgid_0_x36_cellbcast_t::cell_voltage_encode()
{
    return (uint16_t)(cell_voltage / 0.0001);
}

double dbc_bms_msgid_0_x36_cellbcast_t::cell_voltage_decode()
{
    return ((double)cell_voltage * 0.0001);
}

bool dbc_bms_msgid_0_x36_cellbcast_t::cell_voltage_is_in_range()
{
    (void)cell_voltage;

    return (true);
}

uint16_t dbc_bms_msgid_0_x36_cellbcast_t::cell_resistance_encode()
{
    return (uint16_t)(cell_resistance / 0.01);
}

double dbc_bms_msgid_0_x36_cellbcast_t::cell_resistance_decode()
{
    return ((double)cell_resistance * 0.01);
}

bool dbc_bms_msgid_0_x36_cellbcast_t::cell_resistance_is_in_range()
{
    return (cell_resistance <= 32767u);
}

uint8_t dbc_bms_msgid_0_x36_cellbcast_t::cell_balancing_encode()
{
    return (uint8_t)(cell_balancing);
}

double dbc_bms_msgid_0_x36_cellbcast_t::cell_balancing_decode()
{
    return ((double)cell_balancing);
}

bool dbc_bms_msgid_0_x36_cellbcast_t::cell_balancing_is_in_range()
{
    return (cell_balancing <= 1u);
}

uint16_t dbc_bms_msgid_0_x36_cellbcast_t::cell_open_voltage_encode()
{
    return (uint16_t)(cell_open_voltage / 0.0001);
}

double dbc_bms_msgid_0_x36_cellbcast_t::cell_open_voltage_decode()
{
    return ((double)cell_open_voltage * 0.0001);
}

bool dbc_bms_msgid_0_x36_cellbcast_t::cell_open_voltage_is_in_range()
{
    (void)cell_open_voltage;

    return (true);
}

uint8_t dbc_bms_msgid_0_x36_cellbcast_t::checksum_encode()
{
    return (uint8_t)(checksum);
}

double dbc_bms_msgid_0_x36_cellbcast_t::checksum_decode()
{
    return ((double)checksum);
}

bool dbc_bms_msgid_0_x36_cellbcast_t::checksum_is_in_range()
{
    (void)checksum;

    return (true);
}

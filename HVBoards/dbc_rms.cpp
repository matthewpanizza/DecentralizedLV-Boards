/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.1 Mon Dec 27 21:13:46 2021.
 */

#include <string.h>

#include "DecentralizedLV-Boards/HVBoards/dbc_rms.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) >> shift);
}

int dbc_rms_m173_modulation_and_flux_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_modulation_index, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_modulation_index, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_flux_weakening_output, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_flux_weakening_output, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_id_command, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_id_command, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_iq_command, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_iq_command, 8u, 0xffu);

    return (8);
}

int dbc_rms_m173_modulation_and_flux_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_modulation_index = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_modulation_index |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_flux_weakening_output = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_flux_weakening_output |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_id_command = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_id_command |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_iq_command = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_iq_command |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d1_modulation_index_encode()
{
    return (int16_t)(d1_modulation_index / 0.0001);
}

double dbc_rms_m173_modulation_and_flux_info_t::d1_modulation_index_decode()
{
    return ((double)d1_modulation_index * 0.0001);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d1_modulation_index_is_in_range()
{
    (void)d1_modulation_index;

    return (true);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d2_flux_weakening_output_encode()
{
    return (int16_t)(d2_flux_weakening_output / 0.1);
}

double dbc_rms_m173_modulation_and_flux_info_t::d2_flux_weakening_output_decode()
{
    return ((double)d2_flux_weakening_output * 0.1);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d2_flux_weakening_output_is_in_range()
{
    (void)d2_flux_weakening_output;

    return (true);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d3_id_command_encode()
{
    return (int16_t)(d3_id_command / 0.1);
}

double dbc_rms_m173_modulation_and_flux_info_t::d3_id_command_decode()
{
    return ((double)d3_id_command * 0.1);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d3_id_command_is_in_range()
{
    (void)d3_id_command;

    return (true);
}

int16_t dbc_rms_m173_modulation_and_flux_info_t::d4_iq_command_encode()
{
    return (int16_t)(d4_iq_command / 0.1);
}

double dbc_rms_m173_modulation_and_flux_info_t::d4_iq_command_decode()
{
    return ((double)d4_iq_command * 0.1);
}

bool dbc_rms_m173_modulation_and_flux_info_t::d4_iq_command_is_in_range()
{
    (void)d4_iq_command;

    return (true);
}

int dbc_rms_m172_torque_and_timer_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_commanded_torque, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_commanded_torque, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_torque_feedback, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_torque_feedback, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u32(d3_power_on_timer, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u32(d3_power_on_timer, 8u, 0xffu);
    dst_p[6] |= pack_right_shift_u32(d3_power_on_timer, 16u, 0xffu);
    dst_p[7] |= pack_right_shift_u32(d3_power_on_timer, 24u, 0xffu);

    return (8);
}

int dbc_rms_m172_torque_and_timer_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_commanded_torque = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_commanded_torque |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_torque_feedback = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_torque_feedback |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_power_on_timer = unpack_right_shift_u32(src_p[4], 0u, 0xffu);
    d3_power_on_timer |= unpack_left_shift_u32(src_p[5], 8u, 0xffu);
    d3_power_on_timer |= unpack_left_shift_u32(src_p[6], 16u, 0xffu);
    d3_power_on_timer |= unpack_left_shift_u32(src_p[7], 24u, 0xffu);

    return (0);
}

int16_t dbc_rms_m172_torque_and_timer_info_t::d1_commanded_torque_encode()
{
    return (int16_t)(d1_commanded_torque / 0.1);
}

double dbc_rms_m172_torque_and_timer_info_t::d1_commanded_torque_decode()
{
    return ((double)d1_commanded_torque * 0.1);
}

bool dbc_rms_m172_torque_and_timer_info_t::d1_commanded_torque_is_in_range()
{
    (void)d1_commanded_torque;

    return (true);
}

int16_t dbc_rms_m172_torque_and_timer_info_t::d2_torque_feedback_encode()
{
    return (int16_t)(d2_torque_feedback / 0.1);
}

double dbc_rms_m172_torque_and_timer_info_t::d2_torque_feedback_decode()
{
    return ((double)d2_torque_feedback * 0.1);
}

bool dbc_rms_m172_torque_and_timer_info_t::d2_torque_feedback_is_in_range()
{
    (void)d2_torque_feedback;

    return (true);
}

uint32_t dbc_rms_m172_torque_and_timer_info_t::d3_power_on_timer_encode()
{
    return (uint32_t)(d3_power_on_timer / 0.003);
}

double dbc_rms_m172_torque_and_timer_info_t::d3_power_on_timer_decode()
{
    return ((double)d3_power_on_timer * 0.003);
}

bool dbc_rms_m172_torque_and_timer_info_t::d3_power_on_timer_is_in_range()
{
    return (d3_power_on_timer <= 4294933333u);
}

int dbc_rms_m194_read_write_param_response_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_parameter_address_response, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_parameter_address_response, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(d2_write_success, 0u, 0x01u);
    dst_p[4] |= pack_left_shift_u16(d3_data_response, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_data_response, 8u, 0xffu);

    return (8);
}

int dbc_rms_m194_read_write_param_response_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_parameter_address_response = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_parameter_address_response |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_write_success = unpack_right_shift_u8(src_p[2], 0u, 0x01u);
    d3_data_response = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_data_response |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);

    return (0);
}

uint16_t dbc_rms_m194_read_write_param_response_t::d1_parameter_address_response_encode()
{
    return (uint16_t)(d1_parameter_address_response);
}

double dbc_rms_m194_read_write_param_response_t::d1_parameter_address_response_decode()
{
    return ((double)d1_parameter_address_response);
}

bool dbc_rms_m194_read_write_param_response_t::d1_parameter_address_response_is_in_range()
{
    (void)d1_parameter_address_response;

    return (true);
}

uint8_t dbc_rms_m194_read_write_param_response_t::d2_write_success_encode()
{
    return (uint8_t)(d2_write_success);
}

double dbc_rms_m194_read_write_param_response_t::d2_write_success_decode()
{
    return ((double)d2_write_success);
}

bool dbc_rms_m194_read_write_param_response_t::d2_write_success_is_in_range()
{
    return (d2_write_success <= 1u);
}

int16_t dbc_rms_m194_read_write_param_response_t::d3_data_response_encode()
{
    return (int16_t)(d3_data_response);
}

double dbc_rms_m194_read_write_param_response_t::d3_data_response_decode()
{
    return ((double)d3_data_response);
}

bool dbc_rms_m194_read_write_param_response_t::d3_data_response_is_in_range()
{
    (void)d3_data_response;

    return (true);
}

int dbc_rms_m193_read_write_param_command_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_parameter_address_command, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_parameter_address_command, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(d2_read_write_command, 0u, 0x01u);
    dst_p[4] |= pack_left_shift_u16(d3_data_command, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_data_command, 8u, 0xffu);

    return (8);
}

int dbc_rms_m193_read_write_param_command_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_parameter_address_command = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_parameter_address_command |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_read_write_command = unpack_right_shift_u8(src_p[2], 0u, 0x01u);
    d3_data_command = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_data_command |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);

    return (0);
}

uint16_t dbc_rms_m193_read_write_param_command_t::d1_parameter_address_command_encode()
{
    return (uint16_t)(d1_parameter_address_command);
}

double dbc_rms_m193_read_write_param_command_t::d1_parameter_address_command_decode()
{
    return ((double)d1_parameter_address_command);
}

bool dbc_rms_m193_read_write_param_command_t::d1_parameter_address_command_is_in_range()
{
    (void)d1_parameter_address_command;

    return (true);
}

uint8_t dbc_rms_m193_read_write_param_command_t::d2_read_write_command_encode()
{
    return (uint8_t)(d2_read_write_command);
}

double dbc_rms_m193_read_write_param_command_t::d2_read_write_command_decode()
{
    return ((double)d2_read_write_command);
}

bool dbc_rms_m193_read_write_param_command_t::d2_read_write_command_is_in_range()
{
    return (d2_read_write_command <= 1u);
}

int16_t dbc_rms_m193_read_write_param_command_t::d3_data_command_encode()
{
    return (int16_t)(d3_data_command);
}

double dbc_rms_m193_read_write_param_command_t::d3_data_command_decode()
{
    return ((double)d3_data_command);
}

bool dbc_rms_m193_read_write_param_command_t::d3_data_command_is_in_range()
{
    (void)d3_data_command;

    return (true);
}

int dbc_rms_m192_command_message_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(torque_command, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(torque_command, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(speed_command, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(speed_command, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(direction_command, 0u, 0x01u);
    dst_p[5] |= pack_left_shift_u8(inverter_enable, 0u, 0x01u);
    dst_p[5] |= pack_left_shift_u8(inverter_discharge, 1u, 0x02u);
    dst_p[5] |= pack_left_shift_u8(speed_mode_enable, 2u, 0x04u);
    dst_p[5] |= pack_left_shift_u8(rolling_counter, 4u, 0xf0u);
    dst_p[6] |= pack_left_shift_u16(torque_limit_command, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(torque_limit_command, 8u, 0xffu);

    return (8);
}

int dbc_rms_m192_command_message_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    torque_command = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    torque_command |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    speed_command = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    speed_command |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    direction_command = unpack_right_shift_u8(src_p[4], 0u, 0x01u);
    inverter_enable = unpack_right_shift_u8(src_p[5], 0u, 0x01u);
    inverter_discharge = unpack_right_shift_u8(src_p[5], 1u, 0x02u);
    speed_mode_enable = unpack_right_shift_u8(src_p[5], 2u, 0x04u);
    rolling_counter = unpack_right_shift_u8(src_p[5], 4u, 0xf0u);
    torque_limit_command = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    torque_limit_command |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m192_command_message_t::torque_command_encode()
{
    return (int16_t)(torque_command / 0.1);
}

double dbc_rms_m192_command_message_t::torque_command_decode()
{
    return ((double)torque_command * 0.1);
}

bool dbc_rms_m192_command_message_t::torque_command_is_in_range()
{
    (void)torque_command;

    return (true);
}

int16_t dbc_rms_m192_command_message_t::speed_command_encode()
{
    return (int16_t)(speed_command);
}

double dbc_rms_m192_command_message_t::speed_command_decode()
{
    return ((double)speed_command);
}

bool dbc_rms_m192_command_message_t::speed_command_is_in_range()
{
    (void)speed_command;

    return (true);
}

uint8_t dbc_rms_m192_command_message_t::direction_command_encode()
{
    return (uint8_t)(direction_command);
}

double dbc_rms_m192_command_message_t::direction_command_decode()
{
    return ((double)direction_command);
}

bool dbc_rms_m192_command_message_t::direction_command_is_in_range()
{
    return (direction_command <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::inverter_enable_encode()
{
    return (uint8_t)(inverter_enable);
}

double dbc_rms_m192_command_message_t::inverter_enable_decode()
{
    return ((double)inverter_enable);
}

bool dbc_rms_m192_command_message_t::inverter_enable_is_in_range()
{
    return (inverter_enable <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::inverter_discharge_encode()
{
    return (uint8_t)(inverter_discharge);
}

double dbc_rms_m192_command_message_t::inverter_discharge_decode()
{
    return ((double)inverter_discharge);
}

bool dbc_rms_m192_command_message_t::inverter_discharge_is_in_range()
{
    return (inverter_discharge <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::speed_mode_enable_encode()
{
    return (uint8_t)(speed_mode_enable);
}

double dbc_rms_m192_command_message_t::speed_mode_enable_decode()
{
    return ((double)speed_mode_enable);
}

bool dbc_rms_m192_command_message_t::speed_mode_enable_is_in_range()
{
    return (speed_mode_enable <= 1u);
}

uint8_t dbc_rms_m192_command_message_t::rolling_counter_encode()
{
    return (uint8_t)(rolling_counter);
}

double dbc_rms_m192_command_message_t::rolling_counter_decode()
{
    return ((double)rolling_counter);
}

bool dbc_rms_m192_command_message_t::rolling_counter_is_in_range()
{
    return (rolling_counter <= 15u);
}

int16_t dbc_rms_m192_command_message_t::torque_limit_command_encode()
{
    return (int16_t)(torque_limit_command / 0.1);
}

double dbc_rms_m192_command_message_t::torque_limit_command_decode()
{
    return ((double)torque_limit_command * 0.1);
}

bool dbc_rms_m192_command_message_t::torque_limit_command_is_in_range()
{
    (void)torque_limit_command;

    return (true);
}

int dbc_rms_m171_fault_codes_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_post_fault_lo, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_post_fault_lo, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_post_fault_hi, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_post_fault_hi, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_run_fault_lo, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_run_fault_lo, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_run_fault_hi, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_run_fault_hi, 8u, 0xffu);

    return (8);
}

int dbc_rms_m171_fault_codes_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_post_fault_lo = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_post_fault_lo |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_post_fault_hi = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_post_fault_hi |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_run_fault_lo = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_run_fault_lo |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_run_fault_hi = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_run_fault_hi |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

uint16_t dbc_rms_m171_fault_codes_t::d1_post_fault_lo_encode()
{
    return (uint16_t)(d1_post_fault_lo);
}

double dbc_rms_m171_fault_codes_t::d1_post_fault_lo_decode()
{
    return ((double)d1_post_fault_lo);
}

bool dbc_rms_m171_fault_codes_t::d1_post_fault_lo_is_in_range()
{
    (void)d1_post_fault_lo;

    return (true);
}

uint16_t dbc_rms_m171_fault_codes_t::d2_post_fault_hi_encode()
{
    return (uint16_t)(d2_post_fault_hi);
}

double dbc_rms_m171_fault_codes_t::d2_post_fault_hi_decode()
{
    return ((double)d2_post_fault_hi);
}

bool dbc_rms_m171_fault_codes_t::d2_post_fault_hi_is_in_range()
{
    (void)d2_post_fault_hi;

    return (true);
}

uint16_t dbc_rms_m171_fault_codes_t::d3_run_fault_lo_encode()
{
    return (uint16_t)(d3_run_fault_lo);
}

double dbc_rms_m171_fault_codes_t::d3_run_fault_lo_decode()
{
    return ((double)d3_run_fault_lo);
}

bool dbc_rms_m171_fault_codes_t::d3_run_fault_lo_is_in_range()
{
    (void)d3_run_fault_lo;

    return (true);
}

uint16_t dbc_rms_m171_fault_codes_t::d4_run_fault_hi_encode()
{
    return (uint16_t)(d4_run_fault_hi);
}

double dbc_rms_m171_fault_codes_t::d4_run_fault_hi_decode()
{
    return ((double)d4_run_fault_hi);
}

bool dbc_rms_m171_fault_codes_t::d4_run_fault_hi_is_in_range()
{
    (void)d4_run_fault_hi;

    return (true);
}

int dbc_rms_m170_internal_states_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(d1_vsm_state, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(d1_pwm_frequency, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(d2_inverter_state, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(d3_relay_1_status, 0u, 0x01u);
    dst_p[3] |= pack_left_shift_u8(d3_relay_2_status, 1u, 0x02u);
    dst_p[3] |= pack_left_shift_u8(d3_relay_3_status, 2u, 0x04u);
    dst_p[3] |= pack_left_shift_u8(d3_relay_4_status, 3u, 0x08u);
    dst_p[3] |= pack_left_shift_u8(d3_relay_5_status, 4u, 0x10u);
    dst_p[3] |= pack_left_shift_u8(d3_relay_6_status, 5u, 0x20u);
    dst_p[4] |= pack_left_shift_u8(d4_inverter_run_mode, 0u, 0x01u);
    dst_p[4] |= pack_left_shift_u8(d4_inverter_discharge_state, 5u, 0xe0u);
    dst_p[5] |= pack_left_shift_u8(d5_inverter_command_mode, 0u, 0x01u);
    dst_p[5] |= pack_left_shift_u8(d5_rolling_counter, 4u, 0xf0u);
    dst_p[6] |= pack_left_shift_u8(d6_inverter_enable_state, 0u, 0x01u);
    dst_p[6] |= pack_left_shift_u8(d6_inverter_enable_lockout, 7u, 0x80u);
    dst_p[7] |= pack_left_shift_u8(d7_direction_command, 0u, 0x01u);
    dst_p[7] |= pack_left_shift_u8(d7_bms_active, 1u, 0x02u);
    dst_p[7] |= pack_left_shift_u8(d7_bms_torque_limiting, 2u, 0x04u);
    dst_p[7] |= pack_left_shift_u8(d7_max_speed_limiting, 3u, 0x08u);
    dst_p[7] |= pack_left_shift_u8(d7_low_speed_limiting, 5u, 0x20u);

    return (8);
}

int dbc_rms_m170_internal_states_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_vsm_state = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    d1_pwm_frequency = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    d2_inverter_state = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    d3_relay_1_status = unpack_right_shift_u8(src_p[3], 0u, 0x01u);
    d3_relay_2_status = unpack_right_shift_u8(src_p[3], 1u, 0x02u);
    d3_relay_3_status = unpack_right_shift_u8(src_p[3], 2u, 0x04u);
    d3_relay_4_status = unpack_right_shift_u8(src_p[3], 3u, 0x08u);
    d3_relay_5_status = unpack_right_shift_u8(src_p[3], 4u, 0x10u);
    d3_relay_6_status = unpack_right_shift_u8(src_p[3], 5u, 0x20u);
    d4_inverter_run_mode = unpack_right_shift_u8(src_p[4], 0u, 0x01u);
    d4_inverter_discharge_state = unpack_right_shift_u8(src_p[4], 5u, 0xe0u);
    d5_inverter_command_mode = unpack_right_shift_u8(src_p[5], 0u, 0x01u);
    d5_rolling_counter = unpack_right_shift_u8(src_p[5], 4u, 0xf0u);
    d6_inverter_enable_state = unpack_right_shift_u8(src_p[6], 0u, 0x01u);
    d6_inverter_enable_lockout = unpack_right_shift_u8(src_p[6], 7u, 0x80u);
    d7_direction_command = unpack_right_shift_u8(src_p[7], 0u, 0x01u);
    d7_bms_active = unpack_right_shift_u8(src_p[7], 1u, 0x02u);
    d7_bms_torque_limiting = unpack_right_shift_u8(src_p[7], 2u, 0x04u);
    d7_max_speed_limiting = unpack_right_shift_u8(src_p[7], 3u, 0x08u);
    d7_low_speed_limiting = unpack_right_shift_u8(src_p[7], 5u, 0x20u);

    return (0);
}

uint8_t dbc_rms_m170_internal_states_t::d1_vsm_state_encode()
{
    return (uint8_t)(d1_vsm_state);
}

double dbc_rms_m170_internal_states_t::d1_vsm_state_decode()
{
    return ((double)d1_vsm_state);
}

bool dbc_rms_m170_internal_states_t::d1_vsm_state_is_in_range()
{
    return (d1_vsm_state <= 15u);
}

uint8_t dbc_rms_m170_internal_states_t::d1_pwm_frequency_encode()
{
    return (uint8_t)(d1_pwm_frequency);
}

double dbc_rms_m170_internal_states_t::d1_pwm_frequency_decode()
{
    return ((double)d1_pwm_frequency);
}

bool dbc_rms_m170_internal_states_t::d1_pwm_frequency_is_in_range()
{
    (void)d1_pwm_frequency;

    return (true);
}

uint8_t dbc_rms_m170_internal_states_t::d2_inverter_state_encode()
{
    return (uint8_t)(d2_inverter_state);
}

double dbc_rms_m170_internal_states_t::d2_inverter_state_decode()
{
    return ((double)d2_inverter_state);
}

bool dbc_rms_m170_internal_states_t::d2_inverter_state_is_in_range()
{
    (void)d2_inverter_state;

    return (true);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_1_status_encode()
{
    return (uint8_t)(d3_relay_1_status);
}

double dbc_rms_m170_internal_states_t::d3_relay_1_status_decode()
{
    return ((double)d3_relay_1_status);
}

bool dbc_rms_m170_internal_states_t::d3_relay_1_status_is_in_range()
{
    return (d3_relay_1_status <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_2_status_encode()
{
    return (uint8_t)(d3_relay_2_status);
}

double dbc_rms_m170_internal_states_t::d3_relay_2_status_decode()
{
    return ((double)d3_relay_2_status);
}

bool dbc_rms_m170_internal_states_t::d3_relay_2_status_is_in_range()
{
    return (d3_relay_2_status <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_3_status_encode()
{
    return (uint8_t)(d3_relay_3_status);
}

double dbc_rms_m170_internal_states_t::d3_relay_3_status_decode()
{
    return ((double)d3_relay_3_status);
}

bool dbc_rms_m170_internal_states_t::d3_relay_3_status_is_in_range()
{
    return (d3_relay_3_status <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_4_status_encode()
{
    return (uint8_t)(d3_relay_4_status);
}

double dbc_rms_m170_internal_states_t::d3_relay_4_status_decode()
{
    return ((double)d3_relay_4_status);
}

bool dbc_rms_m170_internal_states_t::d3_relay_4_status_is_in_range()
{
    return (d3_relay_4_status <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_5_status_encode()
{
    return (uint8_t)(d3_relay_5_status);
}

double dbc_rms_m170_internal_states_t::d3_relay_5_status_decode()
{
    return ((double)d3_relay_5_status);
}

bool dbc_rms_m170_internal_states_t::d3_relay_5_status_is_in_range()
{
    return (d3_relay_5_status <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d3_relay_6_status_encode()
{
    return (uint8_t)(d3_relay_6_status);
}

double dbc_rms_m170_internal_states_t::d3_relay_6_status_decode()
{
    return ((double)d3_relay_6_status);
}

bool dbc_rms_m170_internal_states_t::d3_relay_6_status_is_in_range()
{
    return (d3_relay_6_status <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d4_inverter_run_mode_encode()
{
    return (uint8_t)(d4_inverter_run_mode);
}

double dbc_rms_m170_internal_states_t::d4_inverter_run_mode_decode()
{
    return ((double)d4_inverter_run_mode);
}

bool dbc_rms_m170_internal_states_t::d4_inverter_run_mode_is_in_range()
{
    return (d4_inverter_run_mode <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d4_inverter_discharge_state_encode()
{
    return (uint8_t)(d4_inverter_discharge_state);
}

double dbc_rms_m170_internal_states_t::d4_inverter_discharge_state_decode()
{
    return ((double)d4_inverter_discharge_state);
}

bool dbc_rms_m170_internal_states_t::d4_inverter_discharge_state_is_in_range()
{
    return (d4_inverter_discharge_state <= 7u);
}

uint8_t dbc_rms_m170_internal_states_t::d5_inverter_command_mode_encode()
{
    return (uint8_t)(d5_inverter_command_mode);
}

double dbc_rms_m170_internal_states_t::d5_inverter_command_mode_decode()
{
    return ((double)d5_inverter_command_mode);
}

bool dbc_rms_m170_internal_states_t::d5_inverter_command_mode_is_in_range()
{
    return (d5_inverter_command_mode <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d5_rolling_counter_encode()
{
    return (uint8_t)(d5_rolling_counter);
}

double dbc_rms_m170_internal_states_t::d5_rolling_counter_decode()
{
    return ((double)d5_rolling_counter);
}

bool dbc_rms_m170_internal_states_t::d5_rolling_counter_is_in_range()
{
    return (d5_rolling_counter <= 15u);
}

uint8_t dbc_rms_m170_internal_states_t::d6_inverter_enable_state_encode()
{
    return (uint8_t)(d6_inverter_enable_state);
}

double dbc_rms_m170_internal_states_t::d6_inverter_enable_state_decode()
{
    return ((double)d6_inverter_enable_state);
}

bool dbc_rms_m170_internal_states_t::d6_inverter_enable_state_is_in_range()
{
    return (d6_inverter_enable_state <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d6_inverter_enable_lockout_encode()
{
    return (uint8_t)(d6_inverter_enable_lockout);
}

double dbc_rms_m170_internal_states_t::d6_inverter_enable_lockout_decode()
{
    return ((double)d6_inverter_enable_lockout);
}

bool dbc_rms_m170_internal_states_t::d6_inverter_enable_lockout_is_in_range()
{
    return (d6_inverter_enable_lockout <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_direction_command_encode()
{
    return (uint8_t)(d7_direction_command);
}

double dbc_rms_m170_internal_states_t::d7_direction_command_decode()
{
    return ((double)d7_direction_command);
}

bool dbc_rms_m170_internal_states_t::d7_direction_command_is_in_range()
{
    return (d7_direction_command <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_bms_active_encode()
{
    return (uint8_t)(d7_bms_active);
}

double dbc_rms_m170_internal_states_t::d7_bms_active_decode()
{
    return ((double)d7_bms_active);
}

bool dbc_rms_m170_internal_states_t::d7_bms_active_is_in_range()
{
    return (d7_bms_active <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_bms_torque_limiting_encode()
{
    return (uint8_t)(d7_bms_torque_limiting);
}

double dbc_rms_m170_internal_states_t::d7_bms_torque_limiting_decode()
{
    return ((double)d7_bms_torque_limiting);
}

bool dbc_rms_m170_internal_states_t::d7_bms_torque_limiting_is_in_range()
{
    return (d7_bms_torque_limiting <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_max_speed_limiting_encode()
{
    return (uint8_t)(d7_max_speed_limiting);
}

double dbc_rms_m170_internal_states_t::d7_max_speed_limiting_decode()
{
    return ((double)d7_max_speed_limiting);
}

bool dbc_rms_m170_internal_states_t::d7_max_speed_limiting_is_in_range()
{
    return (d7_max_speed_limiting <= 1u);
}

uint8_t dbc_rms_m170_internal_states_t::d7_low_speed_limiting_encode()
{
    return (uint8_t)(d7_low_speed_limiting);
}

double dbc_rms_m170_internal_states_t::d7_low_speed_limiting_decode()
{
    return ((double)d7_low_speed_limiting);
}

bool dbc_rms_m170_internal_states_t::d7_low_speed_limiting_is_in_range()
{
    return (d7_low_speed_limiting <= 1u);
}

int dbc_rms_m169_internal_voltages_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_reference_voltage_1_5, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_reference_voltage_1_5, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_reference_voltage_2_5, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_reference_voltage_2_5, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_reference_voltage_5_0, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_reference_voltage_5_0, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_reference_voltage_12_0, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_reference_voltage_12_0, 8u, 0xffu);

    return (8);
}

int dbc_rms_m169_internal_voltages_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_reference_voltage_1_5 = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_reference_voltage_1_5 |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_reference_voltage_2_5 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_reference_voltage_2_5 |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_reference_voltage_5_0 = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_reference_voltage_5_0 |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_reference_voltage_12_0 = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_reference_voltage_12_0 |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m169_internal_voltages_t::d1_reference_voltage_1_5_encode()
{
    return (int16_t)(d1_reference_voltage_1_5 / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d1_reference_voltage_1_5_decode()
{
    return ((double)d1_reference_voltage_1_5 * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d1_reference_voltage_1_5_is_in_range()
{
    (void)d1_reference_voltage_1_5;

    return (true);
}

int16_t dbc_rms_m169_internal_voltages_t::d2_reference_voltage_2_5_encode()
{
    return (int16_t)(d2_reference_voltage_2_5 / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d2_reference_voltage_2_5_decode()
{
    return ((double)d2_reference_voltage_2_5 * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d2_reference_voltage_2_5_is_in_range()
{
    (void)d2_reference_voltage_2_5;

    return (true);
}

int16_t dbc_rms_m169_internal_voltages_t::d3_reference_voltage_5_0_encode()
{
    return (int16_t)(d3_reference_voltage_5_0 / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d3_reference_voltage_5_0_decode()
{
    return ((double)d3_reference_voltage_5_0 * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d3_reference_voltage_5_0_is_in_range()
{
    (void)d3_reference_voltage_5_0;

    return (true);
}

int16_t dbc_rms_m169_internal_voltages_t::d4_reference_voltage_12_0_encode()
{
    return (int16_t)(d4_reference_voltage_12_0 / 0.01);
}

double dbc_rms_m169_internal_voltages_t::d4_reference_voltage_12_0_decode()
{
    return ((double)d4_reference_voltage_12_0 * 0.01);
}

bool dbc_rms_m169_internal_voltages_t::d4_reference_voltage_12_0_is_in_range()
{
    (void)d4_reference_voltage_12_0;

    return (true);
}

int dbc_rms_m168_flux_id_iq_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_flux_command, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_flux_command, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_flux_feedback, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_flux_feedback, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_id, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_id, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_iq, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_iq, 8u, 0xffu);

    return (8);
}

int dbc_rms_m168_flux_id_iq_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_flux_command = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_flux_command |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_flux_feedback = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_flux_feedback |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_id = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_id |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_iq = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_iq |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d1_flux_command_encode()
{
    return (int16_t)(d1_flux_command / 0.001);
}

double dbc_rms_m168_flux_id_iq_info_t::d1_flux_command_decode()
{
    return ((double)d1_flux_command * 0.001);
}

bool dbc_rms_m168_flux_id_iq_info_t::d1_flux_command_is_in_range()
{
    (void)d1_flux_command;

    return (true);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d2_flux_feedback_encode()
{
    return (int16_t)(d2_flux_feedback / 0.001);
}

double dbc_rms_m168_flux_id_iq_info_t::d2_flux_feedback_decode()
{
    return ((double)d2_flux_feedback * 0.001);
}

bool dbc_rms_m168_flux_id_iq_info_t::d2_flux_feedback_is_in_range()
{
    (void)d2_flux_feedback;

    return (true);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d3_id_encode()
{
    return (int16_t)(d3_id / 0.1);
}

double dbc_rms_m168_flux_id_iq_info_t::d3_id_decode()
{
    return ((double)d3_id * 0.1);
}

bool dbc_rms_m168_flux_id_iq_info_t::d3_id_is_in_range()
{
    (void)d3_id;

    return (true);
}

int16_t dbc_rms_m168_flux_id_iq_info_t::d4_iq_encode()
{
    return (int16_t)(d4_iq / 0.1);
}

double dbc_rms_m168_flux_id_iq_info_t::d4_iq_decode()
{
    return ((double)d4_iq * 0.1);
}

bool dbc_rms_m168_flux_id_iq_info_t::d4_iq_is_in_range()
{
    (void)d4_iq;

    return (true);
}

int dbc_rms_m167_voltage_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_dc_bus_voltage, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_dc_bus_voltage, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_output_voltage, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_output_voltage, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_vab_vd_voltage, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_vab_vd_voltage, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_vbc_vq_voltage, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_vbc_vq_voltage, 8u, 0xffu);

    return (8);
}

int dbc_rms_m167_voltage_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_dc_bus_voltage = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_dc_bus_voltage |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_output_voltage = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_output_voltage |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_vab_vd_voltage = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_vab_vd_voltage |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_vbc_vq_voltage = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_vbc_vq_voltage |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m167_voltage_info_t::d1_dc_bus_voltage_encode()
{
    return (int16_t)(d1_dc_bus_voltage / 0.1);
}

double dbc_rms_m167_voltage_info_t::d1_dc_bus_voltage_decode()
{
    return ((double)d1_dc_bus_voltage * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d1_dc_bus_voltage_is_in_range()
{
    (void)d1_dc_bus_voltage;

    return (true);
}

int16_t dbc_rms_m167_voltage_info_t::d2_output_voltage_encode()
{
    return (int16_t)(d2_output_voltage / 0.1);
}

double dbc_rms_m167_voltage_info_t::d2_output_voltage_decode()
{
    return ((double)d2_output_voltage * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d2_output_voltage_is_in_range()
{
    (void)d2_output_voltage;

    return (true);
}

int16_t dbc_rms_m167_voltage_info_t::d3_vab_vd_voltage_encode()
{
    return (int16_t)(d3_vab_vd_voltage / 0.1);
}

double dbc_rms_m167_voltage_info_t::d3_vab_vd_voltage_decode()
{
    return ((double)d3_vab_vd_voltage * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d3_vab_vd_voltage_is_in_range()
{
    (void)d3_vab_vd_voltage;

    return (true);
}

int16_t dbc_rms_m167_voltage_info_t::d4_vbc_vq_voltage_encode()
{
    return (int16_t)(d4_vbc_vq_voltage / 0.1);
}

double dbc_rms_m167_voltage_info_t::d4_vbc_vq_voltage_decode()
{
    return ((double)d4_vbc_vq_voltage * 0.1);
}

bool dbc_rms_m167_voltage_info_t::d4_vbc_vq_voltage_is_in_range()
{
    (void)d4_vbc_vq_voltage;

    return (true);
}

int dbc_rms_m166_current_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_phase_a_current, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_phase_a_current, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_phase_b_current, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_phase_b_current, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_phase_c_current, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_phase_c_current, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_dc_bus_current, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_dc_bus_current, 8u, 0xffu);

    return (8);
}

int dbc_rms_m166_current_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_phase_a_current = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_phase_a_current |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_phase_b_current = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_phase_b_current |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_phase_c_current = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_phase_c_current |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_dc_bus_current = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_dc_bus_current |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m166_current_info_t::d1_phase_a_current_encode()
{
    return (int16_t)(d1_phase_a_current / 0.1);
}

double dbc_rms_m166_current_info_t::d1_phase_a_current_decode()
{
    return ((double)d1_phase_a_current * 0.1);
}

bool dbc_rms_m166_current_info_t::d1_phase_a_current_is_in_range()
{
    (void)d1_phase_a_current;

    return (true);
}

int16_t dbc_rms_m166_current_info_t::d2_phase_b_current_encode()
{
    return (int16_t)(d2_phase_b_current / 0.1);
}

double dbc_rms_m166_current_info_t::d2_phase_b_current_decode()
{
    return ((double)d2_phase_b_current * 0.1);
}

bool dbc_rms_m166_current_info_t::d2_phase_b_current_is_in_range()
{
    (void)d2_phase_b_current;

    return (true);
}

int16_t dbc_rms_m166_current_info_t::d3_phase_c_current_encode()
{
    return (int16_t)(d3_phase_c_current / 0.1);
}

double dbc_rms_m166_current_info_t::d3_phase_c_current_decode()
{
    return ((double)d3_phase_c_current * 0.1);
}

bool dbc_rms_m166_current_info_t::d3_phase_c_current_is_in_range()
{
    (void)d3_phase_c_current;

    return (true);
}

int16_t dbc_rms_m166_current_info_t::d4_dc_bus_current_encode()
{
    return (int16_t)(d4_dc_bus_current / 0.1);
}

double dbc_rms_m166_current_info_t::d4_dc_bus_current_decode()
{
    return ((double)d4_dc_bus_current * 0.1);
}

bool dbc_rms_m166_current_info_t::d4_dc_bus_current_is_in_range()
{
    (void)d4_dc_bus_current;

    return (true);
}

int dbc_rms_m165_motor_position_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_motor_angle_electrical, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_motor_angle_electrical, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_motor_speed, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_motor_speed, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_electrical_output_frequency, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_electrical_output_frequency, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_delta_resolver_filtered, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_delta_resolver_filtered, 8u, 0xffu);

    return (8);
}

int dbc_rms_m165_motor_position_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_motor_angle_electrical = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_motor_angle_electrical |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_motor_speed = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_motor_speed |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_electrical_output_frequency = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_electrical_output_frequency |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_delta_resolver_filtered = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_delta_resolver_filtered |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

uint16_t dbc_rms_m165_motor_position_info_t::d1_motor_angle_electrical_encode()
{
    return (uint16_t)(d1_motor_angle_electrical / 0.1);
}

double dbc_rms_m165_motor_position_info_t::d1_motor_angle_electrical_decode()
{
    return ((double)d1_motor_angle_electrical * 0.1);
}

bool dbc_rms_m165_motor_position_info_t::d1_motor_angle_electrical_is_in_range()
{
    (void)d1_motor_angle_electrical;

    return (true);
}

int16_t dbc_rms_m165_motor_position_info_t::d2_motor_speed_encode()
{
    return (int16_t)(d2_motor_speed);
}

double dbc_rms_m165_motor_position_info_t::d2_motor_speed_decode()
{
    return ((double)d2_motor_speed);
}

bool dbc_rms_m165_motor_position_info_t::d2_motor_speed_is_in_range()
{
    (void)d2_motor_speed;

    return (true);
}

int16_t dbc_rms_m165_motor_position_info_t::d3_electrical_output_frequency_encode()
{
    return (int16_t)(d3_electrical_output_frequency / 0.1);
}

double dbc_rms_m165_motor_position_info_t::d3_electrical_output_frequency_decode()
{
    return ((double)d3_electrical_output_frequency * 0.1);
}

bool dbc_rms_m165_motor_position_info_t::d3_electrical_output_frequency_is_in_range()
{
    (void)d3_electrical_output_frequency;

    return (true);
}

int16_t dbc_rms_m165_motor_position_info_t::d4_delta_resolver_filtered_encode()
{
    return (int16_t)(d4_delta_resolver_filtered / 0.1);
}

double dbc_rms_m165_motor_position_info_t::d4_delta_resolver_filtered_decode()
{
    return ((double)d4_delta_resolver_filtered * 0.1);
}

bool dbc_rms_m165_motor_position_info_t::d4_delta_resolver_filtered_is_in_range()
{
    (void)d4_delta_resolver_filtered;

    return (true);
}

int dbc_rms_m164_digital_input_status_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(d1_digital_input_1, 0u, 0x01u);
    dst_p[1] |= pack_left_shift_u8(d2_digital_input_2, 0u, 0x01u);
    dst_p[2] |= pack_left_shift_u8(d3_digital_input_3, 0u, 0x01u);
    dst_p[3] |= pack_left_shift_u8(d4_digital_input_4, 0u, 0x01u);
    dst_p[4] |= pack_left_shift_u8(d5_digital_input_5, 0u, 0x01u);
    dst_p[5] |= pack_left_shift_u8(d6_digital_input_6, 0u, 0x01u);
    dst_p[6] |= pack_left_shift_u8(d7_digital_input_7, 0u, 0x01u);
    dst_p[7] |= pack_left_shift_u8(d8_digital_input_8, 0u, 0x01u);

    return (8);
}

int dbc_rms_m164_digital_input_status_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_digital_input_1 = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
    d2_digital_input_2 = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
    d3_digital_input_3 = unpack_right_shift_u8(src_p[2], 0u, 0x01u);
    d4_digital_input_4 = unpack_right_shift_u8(src_p[3], 0u, 0x01u);
    d5_digital_input_5 = unpack_right_shift_u8(src_p[4], 0u, 0x01u);
    d6_digital_input_6 = unpack_right_shift_u8(src_p[5], 0u, 0x01u);
    d7_digital_input_7 = unpack_right_shift_u8(src_p[6], 0u, 0x01u);
    d8_digital_input_8 = unpack_right_shift_u8(src_p[7], 0u, 0x01u);

    return (0);
}

uint8_t dbc_rms_m164_digital_input_status_t::d1_digital_input_1_encode()
{
    return (uint8_t)(d1_digital_input_1);
}

double dbc_rms_m164_digital_input_status_t::d1_digital_input_1_decode()
{
    return ((double)d1_digital_input_1);
}

bool dbc_rms_m164_digital_input_status_t::d1_digital_input_1_is_in_range()
{
    return (d1_digital_input_1 <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d2_digital_input_2_encode()
{
    return (uint8_t)(d2_digital_input_2);
}

double dbc_rms_m164_digital_input_status_t::d2_digital_input_2_decode()
{
    return ((double)d2_digital_input_2);
}

bool dbc_rms_m164_digital_input_status_t::d2_digital_input_2_is_in_range()
{
    return (d2_digital_input_2 <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d3_digital_input_3_encode()
{
    return (uint8_t)(d3_digital_input_3);
}

double dbc_rms_m164_digital_input_status_t::d3_digital_input_3_decode()
{
    return ((double)d3_digital_input_3);
}

bool dbc_rms_m164_digital_input_status_t::d3_digital_input_3_is_in_range()
{
    return (d3_digital_input_3 <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d4_digital_input_4_encode()
{
    return (uint8_t)(d4_digital_input_4);
}

double dbc_rms_m164_digital_input_status_t::d4_digital_input_4_decode()
{
    return ((double)d4_digital_input_4);
}

bool dbc_rms_m164_digital_input_status_t::d4_digital_input_4_is_in_range()
{
    return (d4_digital_input_4 <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d5_digital_input_5_encode()
{
    return (uint8_t)(d5_digital_input_5);
}

double dbc_rms_m164_digital_input_status_t::d5_digital_input_5_decode()
{
    return ((double)d5_digital_input_5);
}

bool dbc_rms_m164_digital_input_status_t::d5_digital_input_5_is_in_range()
{
    return (d5_digital_input_5 <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d6_digital_input_6_encode()
{
    return (uint8_t)(d6_digital_input_6);
}

double dbc_rms_m164_digital_input_status_t::d6_digital_input_6_decode()
{
    return ((double)d6_digital_input_6);
}

bool dbc_rms_m164_digital_input_status_t::d6_digital_input_6_is_in_range()
{
    return (d6_digital_input_6 <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d7_digital_input_7_encode()
{
    return (uint8_t)(d7_digital_input_7);
}

double dbc_rms_m164_digital_input_status_t::d7_digital_input_7_decode()
{
    return ((double)d7_digital_input_7);
}

bool dbc_rms_m164_digital_input_status_t::d7_digital_input_7_is_in_range()
{
    return (d7_digital_input_7 <= 1u);
}

uint8_t dbc_rms_m164_digital_input_status_t::d8_digital_input_8_encode()
{
    return (uint8_t)(d8_digital_input_8);
}

double dbc_rms_m164_digital_input_status_t::d8_digital_input_8_decode()
{
    return ((double)d8_digital_input_8);
}

bool dbc_rms_m164_digital_input_status_t::d8_digital_input_8_is_in_range()
{
    return (d8_digital_input_8 <= 1u);
}

int dbc_rms_m163_analog_input_voltages_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_analog_input_1, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_analog_input_1, 8u, 0x03u);
    dst_p[1] |= pack_left_shift_u16(d2_analog_input_2, 2u, 0xfcu);
    dst_p[2] |= pack_right_shift_u16(d2_analog_input_2, 6u, 0x0fu);
    dst_p[2] |= pack_left_shift_u16(d3_analog_input_3, 4u, 0xf0u);
    dst_p[3] |= pack_right_shift_u16(d3_analog_input_3, 4u, 0x3fu);
    dst_p[4] |= pack_left_shift_u16(d4_analog_input_4, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d4_analog_input_4, 8u, 0x03u);
    dst_p[5] |= pack_left_shift_u16(d5_analog_input_5, 2u, 0xfcu);
    dst_p[6] |= pack_right_shift_u16(d5_analog_input_5, 6u, 0x0fu);
    dst_p[6] |= pack_left_shift_u16(d6_analog_input_6, 4u, 0xf0u);
    dst_p[7] |= pack_right_shift_u16(d6_analog_input_6, 4u, 0x3fu);

    return (8);
}

int dbc_rms_m163_analog_input_voltages_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_analog_input_1 = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_analog_input_1 |= unpack_left_shift_u16(src_p[1], 8u, 0x03u);
    d2_analog_input_2 = unpack_right_shift_u16(src_p[1], 2u, 0xfcu);
    d2_analog_input_2 |= unpack_left_shift_u16(src_p[2], 6u, 0x0fu);
    d3_analog_input_3 = unpack_right_shift_u16(src_p[2], 4u, 0xf0u);
    d3_analog_input_3 |= unpack_left_shift_u16(src_p[3], 4u, 0x3fu);
    d4_analog_input_4 = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d4_analog_input_4 |= unpack_left_shift_u16(src_p[5], 8u, 0x03u);
    d5_analog_input_5 = unpack_right_shift_u16(src_p[5], 2u, 0xfcu);
    d5_analog_input_5 |= unpack_left_shift_u16(src_p[6], 6u, 0x0fu);
    d6_analog_input_6 = unpack_right_shift_u16(src_p[6], 4u, 0xf0u);
    d6_analog_input_6 |= unpack_left_shift_u16(src_p[7], 4u, 0x3fu);

    return (0);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d1_analog_input_1_encode()
{
    return (uint16_t)(d1_analog_input_1 / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d1_analog_input_1_decode()
{
    return ((double)d1_analog_input_1 * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d1_analog_input_1_is_in_range()
{
    return (d1_analog_input_1 <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d2_analog_input_2_encode()
{
    return (uint16_t)(d2_analog_input_2 / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d2_analog_input_2_decode()
{
    return ((double)d2_analog_input_2 * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d2_analog_input_2_is_in_range()
{
    return (d2_analog_input_2 <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d3_analog_input_3_encode()
{
    return (uint16_t)(d3_analog_input_3 / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d3_analog_input_3_decode()
{
    return ((double)d3_analog_input_3 * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d3_analog_input_3_is_in_range()
{
    return (d3_analog_input_3 <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d4_analog_input_4_encode()
{
    return (uint16_t)(d4_analog_input_4 / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d4_analog_input_4_decode()
{
    return ((double)d4_analog_input_4 * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d4_analog_input_4_is_in_range()
{
    return (d4_analog_input_4 <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d5_analog_input_5_encode()
{
    return (uint16_t)(d5_analog_input_5 / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d5_analog_input_5_decode()
{
    return ((double)d5_analog_input_5 * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d5_analog_input_5_is_in_range()
{
    return (d5_analog_input_5 <= 1023u);
}

uint16_t dbc_rms_m163_analog_input_voltages_t::d6_analog_input_6_encode()
{
    return (uint16_t)(d6_analog_input_6 / 0.01);
}

double dbc_rms_m163_analog_input_voltages_t::d6_analog_input_6_decode()
{
    return ((double)d6_analog_input_6 * 0.01);
}

bool dbc_rms_m163_analog_input_voltages_t::d6_analog_input_6_is_in_range()
{
    return (d6_analog_input_6 <= 1023u);
}

int dbc_rms_m162_temperature_set_3_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_rtd4_temperature, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_rtd4_temperature, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_rtd5_temperature, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_rtd5_temperature, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_motor_temperature, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_motor_temperature, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_torque_shudder, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_torque_shudder, 8u, 0xffu);

    return (8);
}

int dbc_rms_m162_temperature_set_3_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_rtd4_temperature = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_rtd4_temperature |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_rtd5_temperature = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_rtd5_temperature |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_motor_temperature = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_motor_temperature |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_torque_shudder = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_torque_shudder |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m162_temperature_set_3_t::d1_rtd4_temperature_encode()
{
    return (int16_t)(d1_rtd4_temperature / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d1_rtd4_temperature_decode()
{
    return ((double)d1_rtd4_temperature * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d1_rtd4_temperature_is_in_range()
{
    (void)d1_rtd4_temperature;

    return (true);
}

int16_t dbc_rms_m162_temperature_set_3_t::d2_rtd5_temperature_encode()
{
    return (int16_t)(d2_rtd5_temperature / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d2_rtd5_temperature_decode()
{
    return ((double)d2_rtd5_temperature * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d2_rtd5_temperature_is_in_range()
{
    (void)d2_rtd5_temperature;

    return (true);
}

int16_t dbc_rms_m162_temperature_set_3_t::d3_motor_temperature_encode()
{
    return (int16_t)(d3_motor_temperature / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d3_motor_temperature_decode()
{
    return ((double)d3_motor_temperature * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d3_motor_temperature_is_in_range()
{
    (void)d3_motor_temperature;

    return (true);
}

int16_t dbc_rms_m162_temperature_set_3_t::d4_torque_shudder_encode()
{
    return (int16_t)(d4_torque_shudder / 0.1);
}

double dbc_rms_m162_temperature_set_3_t::d4_torque_shudder_decode()
{
    return ((double)d4_torque_shudder * 0.1);
}

bool dbc_rms_m162_temperature_set_3_t::d4_torque_shudder_is_in_range()
{
    (void)d4_torque_shudder;

    return (true);
}

int dbc_rms_m161_temperature_set_2_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_control_board_temperature, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_control_board_temperature, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_rtd1_temperature, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_rtd1_temperature, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_rtd2_temperature, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_rtd2_temperature, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_rtd3_temperature, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_rtd3_temperature, 8u, 0xffu);

    return (8);
}

int dbc_rms_m161_temperature_set_2_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_control_board_temperature = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_control_board_temperature |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_rtd1_temperature = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_rtd1_temperature |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_rtd2_temperature = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_rtd2_temperature |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_rtd3_temperature = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_rtd3_temperature |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m161_temperature_set_2_t::d1_control_board_temperature_encode()
{
    return (int16_t)(d1_control_board_temperature / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d1_control_board_temperature_decode()
{
    return ((double)d1_control_board_temperature * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d1_control_board_temperature_is_in_range()
{
    (void)d1_control_board_temperature;

    return (true);
}

int16_t dbc_rms_m161_temperature_set_2_t::d2_rtd1_temperature_encode()
{
    return (int16_t)(d2_rtd1_temperature / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d2_rtd1_temperature_decode()
{
    return ((double)d2_rtd1_temperature * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d2_rtd1_temperature_is_in_range()
{
    (void)d2_rtd1_temperature;

    return (true);
}

int16_t dbc_rms_m161_temperature_set_2_t::d3_rtd2_temperature_encode()
{
    return (int16_t)(d3_rtd2_temperature / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d3_rtd2_temperature_decode()
{
    return ((double)d3_rtd2_temperature * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d3_rtd2_temperature_is_in_range()
{
    (void)d3_rtd2_temperature;

    return (true);
}

int16_t dbc_rms_m161_temperature_set_2_t::d4_rtd3_temperature_encode()
{
    return (int16_t)(d4_rtd3_temperature / 0.1);
}

double dbc_rms_m161_temperature_set_2_t::d4_rtd3_temperature_decode()
{
    return ((double)d4_rtd3_temperature * 0.1);
}

bool dbc_rms_m161_temperature_set_2_t::d4_rtd3_temperature_is_in_range()
{
    (void)d4_rtd3_temperature;

    return (true);
}

int dbc_rms_m160_temperature_set_1_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_module_a, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_module_a, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_module_b, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_module_b, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_module_c, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_module_c, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_gate_driver_board, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_gate_driver_board, 8u, 0xffu);

    return (8);
}

int dbc_rms_m160_temperature_set_1_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_module_a = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_module_a |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_module_b = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_module_b |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_module_c = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_module_c |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_gate_driver_board = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_gate_driver_board |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m160_temperature_set_1_t::d1_module_a_encode()
{
    return (int16_t)(d1_module_a / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d1_module_a_decode()
{
    return ((double)d1_module_a * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d1_module_a_is_in_range()
{
    (void)d1_module_a;

    return (true);
}

int16_t dbc_rms_m160_temperature_set_1_t::d2_module_b_encode()
{
    return (int16_t)(d2_module_b / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d2_module_b_decode()
{
    return ((double)d2_module_b * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d2_module_b_is_in_range()
{
    (void)d2_module_b;

    return (true);
}

int16_t dbc_rms_m160_temperature_set_1_t::d3_module_c_encode()
{
    return (int16_t)(d3_module_c / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d3_module_c_decode()
{
    return ((double)d3_module_c * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d3_module_c_is_in_range()
{
    (void)d3_module_c;

    return (true);
}

int16_t dbc_rms_m160_temperature_set_1_t::d4_gate_driver_board_encode()
{
    return (int16_t)(d4_gate_driver_board / 0.1);
}

double dbc_rms_m160_temperature_set_1_t::d4_gate_driver_board_decode()
{
    return ((double)d4_gate_driver_board * 0.1);
}

bool dbc_rms_m160_temperature_set_1_t::d4_gate_driver_board_is_in_range()
{
    (void)d4_gate_driver_board;

    return (true);
}

int dbc_rms_m174_firmware_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_project_code_eep_ver, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_project_code_eep_ver, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_sw_version, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_sw_version, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d3_date_code_mmdd, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d3_date_code_mmdd, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d4_date_code_yyyy, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d4_date_code_yyyy, 8u, 0xffu);

    return (8);
}

int dbc_rms_m174_firmware_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_project_code_eep_ver = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_project_code_eep_ver |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_sw_version = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_sw_version |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d3_date_code_mmdd = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d3_date_code_mmdd |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d4_date_code_yyyy = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d4_date_code_yyyy |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

uint16_t dbc_rms_m174_firmware_info_t::d1_project_code_eep_ver_encode()
{
    return (uint16_t)(d1_project_code_eep_ver);
}

double dbc_rms_m174_firmware_info_t::d1_project_code_eep_ver_decode()
{
    return ((double)d1_project_code_eep_ver);
}

bool dbc_rms_m174_firmware_info_t::d1_project_code_eep_ver_is_in_range()
{
    (void)d1_project_code_eep_ver;

    return (true);
}

uint16_t dbc_rms_m174_firmware_info_t::d2_sw_version_encode()
{
    return (uint16_t)(d2_sw_version);
}

double dbc_rms_m174_firmware_info_t::d2_sw_version_decode()
{
    return ((double)d2_sw_version);
}

bool dbc_rms_m174_firmware_info_t::d2_sw_version_is_in_range()
{
    (void)d2_sw_version;

    return (true);
}

uint16_t dbc_rms_m174_firmware_info_t::d3_date_code_mmdd_encode()
{
    return (uint16_t)(d3_date_code_mmdd);
}

double dbc_rms_m174_firmware_info_t::d3_date_code_mmdd_decode()
{
    return ((double)d3_date_code_mmdd);
}

bool dbc_rms_m174_firmware_info_t::d3_date_code_mmdd_is_in_range()
{
    (void)d3_date_code_mmdd;

    return (true);
}

uint16_t dbc_rms_m174_firmware_info_t::d4_date_code_yyyy_encode()
{
    return (uint16_t)(d4_date_code_yyyy);
}

double dbc_rms_m174_firmware_info_t::d4_date_code_yyyy_decode()
{
    return ((double)d4_date_code_yyyy);
}

bool dbc_rms_m174_firmware_info_t::d4_date_code_yyyy_is_in_range()
{
    (void)d4_date_code_yyyy;

    return (true);
}

int dbc_rms_m175_diag_data_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(d1_buffer_record, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(d2_buffer_segment, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d3_diag_data_1, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d3_diag_data_1, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(d4_diag_data_2, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(d4_diag_data_2, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(d5_diag_data_3, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(d5_diag_data_3, 8u, 0xffu);

    return (8);
}

int dbc_rms_m175_diag_data_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_buffer_record = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    d2_buffer_segment = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    d3_diag_data_1 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d3_diag_data_1 |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    d4_diag_data_2 = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    d4_diag_data_2 |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    d5_diag_data_3 = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    d5_diag_data_3 |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

uint8_t dbc_rms_m175_diag_data_t::d1_buffer_record_encode()
{
    return (uint8_t)(d1_buffer_record);
}

double dbc_rms_m175_diag_data_t::d1_buffer_record_decode()
{
    return ((double)d1_buffer_record);
}

bool dbc_rms_m175_diag_data_t::d1_buffer_record_is_in_range()
{
    (void)d1_buffer_record;

    return (true);
}

uint8_t dbc_rms_m175_diag_data_t::d2_buffer_segment_encode()
{
    return (uint8_t)(d2_buffer_segment);
}

double dbc_rms_m175_diag_data_t::d2_buffer_segment_decode()
{
    return ((double)d2_buffer_segment);
}

bool dbc_rms_m175_diag_data_t::d2_buffer_segment_is_in_range()
{
    return (d2_buffer_segment <= 5u);
}

int16_t dbc_rms_m175_diag_data_t::d3_diag_data_1_encode()
{
    return (int16_t)(d3_diag_data_1);
}

double dbc_rms_m175_diag_data_t::d3_diag_data_1_decode()
{
    return ((double)d3_diag_data_1);
}

bool dbc_rms_m175_diag_data_t::d3_diag_data_1_is_in_range()
{
    (void)d3_diag_data_1;

    return (true);
}

int16_t dbc_rms_m175_diag_data_t::d4_diag_data_2_encode()
{
    return (int16_t)(d4_diag_data_2);
}

double dbc_rms_m175_diag_data_t::d4_diag_data_2_decode()
{
    return ((double)d4_diag_data_2);
}

bool dbc_rms_m175_diag_data_t::d4_diag_data_2_is_in_range()
{
    (void)d4_diag_data_2;

    return (true);
}

int16_t dbc_rms_m175_diag_data_t::d5_diag_data_3_encode()
{
    return (int16_t)(d5_diag_data_3);
}

double dbc_rms_m175_diag_data_t::d5_diag_data_3_decode()
{
    return ((double)d5_diag_data_3);
}

bool dbc_rms_m175_diag_data_t::d5_diag_data_3_is_in_range()
{
    (void)d5_diag_data_3;

    return (true);
}

int dbc_rms_m187_u2_c_command_txd_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(d1_id_byte, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(d2_setpoint_calc, 0u, 0xffu);

    return (8);
}

int dbc_rms_m187_u2_c_command_txd_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_id_byte = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    d2_setpoint_calc = unpack_right_shift_u8(src_p[1], 0u, 0xffu);

    return (0);
}

uint8_t dbc_rms_m187_u2_c_command_txd_t::d1_id_byte_encode()
{
    return (uint8_t)(d1_id_byte);
}

double dbc_rms_m187_u2_c_command_txd_t::d1_id_byte_decode()
{
    return ((double)d1_id_byte);
}

bool dbc_rms_m187_u2_c_command_txd_t::d1_id_byte_is_in_range()
{
    (void)d1_id_byte;

    return (true);
}

uint8_t dbc_rms_m187_u2_c_command_txd_t::d2_setpoint_calc_encode()
{
    return (uint8_t)(d2_setpoint_calc);
}

double dbc_rms_m187_u2_c_command_txd_t::d2_setpoint_calc_decode()
{
    return ((double)d2_setpoint_calc);
}

bool dbc_rms_m187_u2_c_command_txd_t::d2_setpoint_calc_is_in_range()
{
    (void)d2_setpoint_calc;

    return (true);
}

int dbc_rms_m188_u2_c_message_rxd_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(d1_hv_input_current_sensor_validity, 4u, 0x10u);
    dst_p[0] |= pack_left_shift_u8(d2_14_v_master_fault, 7u, 0x80u);
    dst_p[1] |= pack_left_shift_u8(d3_hv_input_current, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(d4_dtc_status, 0u, 0x07u);
    dst_p[2] |= pack_left_shift_u8(d5_dtc_index, 3u, 0xf8u);
    dst_p[3] |= pack_left_shift_u8(d6_14_v_monitor, 0u, 0xffu);
    dst_p[4] |= pack_left_shift_u8(d7_14_v_conditional, 7u, 0x80u);
    dst_p[6] |= pack_left_shift_u8(d8_14_v_current_monitor, 0u, 0x7fu);

    return (8);
}

int dbc_rms_m188_u2_c_message_rxd_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_hv_input_current_sensor_validity = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
    d2_14_v_master_fault = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
    d3_hv_input_current = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    d4_dtc_status = unpack_right_shift_u8(src_p[2], 0u, 0x07u);
    d5_dtc_index = unpack_right_shift_u8(src_p[2], 3u, 0xf8u);
    d6_14_v_monitor = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
    d7_14_v_conditional = unpack_right_shift_u8(src_p[4], 7u, 0x80u);
    d8_14_v_current_monitor = unpack_right_shift_u8(src_p[6], 0u, 0x7fu);

    return (0);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d1_hv_input_current_sensor_validity_encode()
{
    return (uint8_t)(d1_hv_input_current_sensor_validity);
}

double dbc_rms_m188_u2_c_message_rxd_t::d1_hv_input_current_sensor_validity_decode()
{
    return ((double)d1_hv_input_current_sensor_validity);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d1_hv_input_current_sensor_validity_is_in_range()
{
    return (d1_hv_input_current_sensor_validity <= 1u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d2_14_v_master_fault_encode()
{
    return (uint8_t)(d2_14_v_master_fault);
}

double dbc_rms_m188_u2_c_message_rxd_t::d2_14_v_master_fault_decode()
{
    return ((double)d2_14_v_master_fault);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d2_14_v_master_fault_is_in_range()
{
    return (d2_14_v_master_fault <= 1u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d3_hv_input_current_encode()
{
    return (uint8_t)(d3_hv_input_current);
}

double dbc_rms_m188_u2_c_message_rxd_t::d3_hv_input_current_decode()
{
    return ((double)d3_hv_input_current);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d3_hv_input_current_is_in_range()
{
    (void)d3_hv_input_current;

    return (true);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d4_dtc_status_encode()
{
    return (uint8_t)(d4_dtc_status);
}

double dbc_rms_m188_u2_c_message_rxd_t::d4_dtc_status_decode()
{
    return ((double)d4_dtc_status);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d4_dtc_status_is_in_range()
{
    return (d4_dtc_status <= 7u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d5_dtc_index_encode()
{
    return (uint8_t)(d5_dtc_index);
}

double dbc_rms_m188_u2_c_message_rxd_t::d5_dtc_index_decode()
{
    return ((double)d5_dtc_index);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d5_dtc_index_is_in_range()
{
    return (d5_dtc_index <= 31u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d6_14_v_monitor_encode()
{
    return (uint8_t)(d6_14_v_monitor);
}

double dbc_rms_m188_u2_c_message_rxd_t::d6_14_v_monitor_decode()
{
    return ((double)d6_14_v_monitor);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d6_14_v_monitor_is_in_range()
{
    (void)d6_14_v_monitor;

    return (true);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d7_14_v_conditional_encode()
{
    return (uint8_t)(d7_14_v_conditional);
}

double dbc_rms_m188_u2_c_message_rxd_t::d7_14_v_conditional_decode()
{
    return ((double)d7_14_v_conditional);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d7_14_v_conditional_is_in_range()
{
    return (d7_14_v_conditional <= 1u);
}

uint8_t dbc_rms_m188_u2_c_message_rxd_t::d8_14_v_current_monitor_encode()
{
    return (uint8_t)(d8_14_v_current_monitor);
}

double dbc_rms_m188_u2_c_message_rxd_t::d8_14_v_current_monitor_decode()
{
    return ((double)d8_14_v_current_monitor);
}

bool dbc_rms_m188_u2_c_message_rxd_t::d8_14_v_current_monitor_is_in_range()
{
    return (d8_14_v_current_monitor <= 127u);
}

int dbc_rms_bms_current_limit_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(d1_max_discharge_current, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(d1_max_discharge_current, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(d2_max_charge_current, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(d2_max_charge_current, 8u, 0xffu);

    return (8);
}

int dbc_rms_bms_current_limit_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    d1_max_discharge_current = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    d1_max_discharge_current |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    d2_max_charge_current = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    d2_max_charge_current |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);

    return (0);
}

uint16_t dbc_rms_bms_current_limit_t::d1_max_discharge_current_encode()
{
    return (uint16_t)(d1_max_discharge_current);
}

double dbc_rms_bms_current_limit_t::d1_max_discharge_current_decode()
{
    return ((double)d1_max_discharge_current);
}

bool dbc_rms_bms_current_limit_t::d1_max_discharge_current_is_in_range()
{
    return (d1_max_discharge_current <= 1000u);
}

uint16_t dbc_rms_bms_current_limit_t::d2_max_charge_current_encode()
{
    return (uint16_t)(d2_max_charge_current);
}

double dbc_rms_bms_current_limit_t::d2_max_charge_current_decode()
{
    return ((double)d2_max_charge_current);
}

bool dbc_rms_bms_current_limit_t::d2_max_charge_current_is_in_range()
{
    return (d2_max_charge_current <= 1000u);
}

int dbc_rms_m176_fast_info_t::pack(
    uint8_t *dst_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(fast_torque_command, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(fast_torque_command, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(fast_torque_feedback, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(fast_torque_feedback, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(fast_motor_speed, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(fast_motor_speed, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(fast_dc_bus_voltage, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(fast_dc_bus_voltage, 8u, 0xffu);

    return (8);
}

int dbc_rms_m176_fast_info_t::unpack(
    const uint8_t *src_p,
    size_t size)
{

    if (size < 8u) {
        return (-EINVAL);
    }

    fast_torque_command = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    fast_torque_command |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    fast_torque_feedback = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    fast_torque_feedback |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    fast_motor_speed = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    fast_motor_speed |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    fast_dc_bus_voltage = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    fast_dc_bus_voltage |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t dbc_rms_m176_fast_info_t::fast_torque_command_encode()
{
    return (int16_t)(fast_torque_command / 0.1);
}

double dbc_rms_m176_fast_info_t::fast_torque_command_decode()
{
    return ((double)fast_torque_command * 0.1);
}

bool dbc_rms_m176_fast_info_t::fast_torque_command_is_in_range()
{
    (void)fast_torque_command;

    return (true);
}

int16_t dbc_rms_m176_fast_info_t::fast_torque_feedback_encode()
{
    return (int16_t)(fast_torque_feedback / 0.1);
}

double dbc_rms_m176_fast_info_t::fast_torque_feedback_decode()
{
    return ((double)fast_torque_feedback * 0.1);
}

bool dbc_rms_m176_fast_info_t::fast_torque_feedback_is_in_range()
{
    (void)fast_torque_feedback;

    return (true);
}

int16_t dbc_rms_m176_fast_info_t::fast_motor_speed_encode()
{
    return (int16_t)(fast_motor_speed);
}

double dbc_rms_m176_fast_info_t::fast_motor_speed_decode()
{
    return ((double)fast_motor_speed);
}

bool dbc_rms_m176_fast_info_t::fast_motor_speed_is_in_range()
{
    (void)fast_motor_speed;

    return (true);
}

int16_t dbc_rms_m176_fast_info_t::fast_dc_bus_voltage_encode()
{
    return (int16_t)(fast_dc_bus_voltage / 0.1);
}

double dbc_rms_m176_fast_info_t::fast_dc_bus_voltage_decode()
{
    return ((double)fast_dc_bus_voltage * 0.1);
}

bool dbc_rms_m176_fast_info_t::fast_dc_bus_voltage_is_in_range()
{
    (void)fast_dc_bus_voltage;

    return (true);
}
